plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

def allureVersion = "2.16.1",
    selenideVersion = "5.24.0",
    junitVersion = "5.8.1"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:1.9.6",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:4.3.1",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "com.github.javafaker:javafaker:1.0.2",
            "com.fasterxml.jackson.core:jackson-databind:2.12.5",
            "org.assertj:assertj-core:3.19.0",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:1.7.29",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks.withType(Test) {
    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : System.getProperty("parallelRun"),
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "2").toInteger()
    ]
    useJUnitPlatform(){
        includeTags("api")
        includeTags("pet")
        includeTags("store")
    }
}

task api_pet(type: Test) {
    useJUnitPlatform {
        includeTags 'pet'
    }
}

task api_store(type: Test) {
    useJUnitPlatform {
        includeTags 'store'
    }
}